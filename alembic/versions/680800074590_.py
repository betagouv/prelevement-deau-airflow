"""empty message

Revision ID: 680800074590
Revises: 14c947b4d8f8
Create Date: 2024-06-05 13:03:55.628304

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "680800074590"
down_revision: Union[str, None] = "14c947b4d8f8"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "citerne_releve",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("date_created", sa.DateTime(), nullable=True),
        sa.Column(
            "id_dossier",
            sa.Integer(),
            nullable=True,
            comment="Identifiant unique du dossier",
        ),
        sa.Column(
            "demarche_data_brute_id", postgresql.UUID(as_uuid=True), nullable=True
        ),
        sa.Column(
            "date_releve", sa.DateTime(), nullable=True, comment="Date du relevé"
        ),
        sa.Column(
            "point_prelevement",
            sa.String(),
            nullable=True,
            comment="Point de prélèvement",
        ),
        sa.Column("volume", sa.Float(), nullable=True, comment="Volume prélevé"),
        sa.ForeignKeyConstraint(
            ["demarche_data_brute_id"],
            ["demarche_data_brute.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_citerne_releve_date_created"),
        "citerne_releve",
        ["date_created"],
        unique=False,
    )
    op.create_table(
        "prelevement_releve",
        sa.Column("id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("date_created", sa.DateTime(), nullable=True),
        sa.Column(
            "id_dossier",
            sa.Integer(),
            nullable=True,
            comment="Identifiant unique du dossier",
        ),
        sa.Column(
            "demarche_data_brute_id", postgresql.UUID(as_uuid=True), nullable=True
        ),
        sa.Column("date", sa.DateTime(), nullable=True, comment="Date du relevé"),
        sa.Column("heure", sa.DateTime(), nullable=True, comment="Heure du relevé"),
        sa.Column("valeur", sa.Float(), nullable=True, comment="Valeur du relevé"),
        sa.Column(
            "nom_parametre", sa.String(), nullable=True, comment="Nom du paramètre"
        ),
        sa.Column("type", sa.String(), nullable=True, comment="Type de relevé"),
        sa.Column(
            "frequence", sa.String(), nullable=True, comment="Fréquence de relevé"
        ),
        sa.Column("unite", sa.String(), nullable=True, comment="Unité de relevé"),
        sa.Column(
            "detail_point_suivi",
            sa.String(),
            nullable=True,
            comment="Détail du point de suivi",
        ),
        sa.Column(
            "profondeur",
            sa.Float(),
            nullable=True,
            comment="Profondeur du point de suivi",
        ),
        sa.Column(
            "date_debut",
            sa.DateTime(),
            nullable=True,
            comment="Date de début de relevé",
        ),
        sa.Column(
            "date_fin", sa.DateTime(), nullable=True, comment="Date de fin de relevé"
        ),
        sa.Column(
            "remarque", sa.String(), nullable=True, comment="Remarque sur le relevé"
        ),
        sa.Column(
            "nom_point_prelevement",
            sa.String(),
            nullable=True,
            comment="Nom du point de prélèvement",
        ),
        sa.Column(
            "nom_point_de_prelevement_associe",
            sa.String(),
            nullable=True,
            comment="Nom du point de prélèvement associé",
        ),
        sa.Column(
            "remarque_fonctionnement_point_de_prelevement",
            sa.String(),
            nullable=True,
            comment="Remarque sur le fonctionnement du point de prélèvement",
        ),
        sa.ForeignKeyConstraint(
            ["demarche_data_brute_id"],
            ["demarche_data_brute.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_prelevement_releve_date_created"),
        "prelevement_releve",
        ["date_created"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_prelevement_releve_date_created"), table_name="prelevement_releve"
    )
    op.drop_table("prelevement_releve")
    op.drop_index(op.f("ix_citerne_releve_date_created"), table_name="citerne_releve")
    op.drop_table("citerne_releve")
    # ### end Alembic commands ###
